# configuration with input file and s3 output, with some transformations using grok and ruby script to define dinamic values (folder)
#custom patterns defined
#MILISECONDS (?:[0-9][0-9][0-9])
#TIMESTAMP_CUSTOM %{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T]%{HOUR}:%{MINUTE}:%{SECOND}.%{MILISECONDS}[Z]

input {
    file {
        path => "${PROCESSING_PATH_LOGSTASH}*/*.txt"
        start_position => "beginning"
        ignore_older => 0
        close_older => 1
        max_open_files => 18000
        sincedb_path => "/home/user/sincedb"
    }
}
filter {
  grok {
    break_on_match => true
    patterns_dir => ["/home/user/logstash/logstash-6.2.2/grok_patterns"]
    match => { "message" => "%{TIMESTAMP_CUSTOM:timestamp} %{HOSTNAME} %{GREEDYDATA:jsonstring}" }
  }
    if ! ('_grokparsefailure' in [tags]) {
            json {
                source => "jsonstring"
            }
            mutate {
                remove_field => [ "@version", "path", "host", "@timestamp" , "message", "jsonstring" ]
            }
            ruby {
                code =>
                    "
                            time = event.sprintf('%{timestamp}');
                            yearMonthDay = time[0..9];
                            hours = time[11..12];
                            folder = yearMonthDay + '_' + hours;
                            event.set('[@metadata][prefix]', event.sprintf(folder));
                            eventTypeJson = event.sprintf('%{type}');
                            folderName = '';
                            case eventTypeJson
                            when 'A'
                            folderName = 'folderA';
                            when  'B'
                                    folderName = 'folderB';
                            when 'C'
                                    folderName = 'folderC';
                            when 'D'
                                    folderName = 'folderD'
                            when 'E'
                                    folderName = 'folderE';
                            when 'F'
                                    folderName = 'folderF';
                            else
                                    folderName = 'folderDefault';
                            end
                            event.set('[@metadata][folderName]',folderName);
                    "
            }
    }
}
output {
  if "_grokparsefailure" in [tags] {
    file { "path" => "/home/user/grok_failures.txt" }
  }
  else {

               s3 {
                        id => "id-ivt"
                                aws_credentials_file => "/opt/company/credentials.yml"
                        region => "us-east-2"
                        bucket => "company-evt-ids"
                        canned_acl => "private"
                        prefix => "%{[@metadata][folderName]}/%{[@metadata][prefix]}"
                        codec =>  json_lines
                        size_file => 2048
                        time_file => 2
                 }

  }
}

